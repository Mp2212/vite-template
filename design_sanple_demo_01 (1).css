const exportToCSV = async () => {
  isExported.value = true;

  // ✅ Format helper
  const pad = (n) => n.toString().padStart(2, '0');

  const csvData = filteredRecordsComputed.value.map((record) => {
    const utc = new Date(record.deployedDate);

    // ✅ Force shift -5 hours (EST)
    const estMillis = utc.getTime() - (5 * 60 * 60 * 1000);
    const estDate = new Date(estMillis);

    const formattedDate =
      `${pad(estDate.getMonth() + 1)}/${pad(estDate.getDate())}/${estDate.getFullYear()}, ` +
      `${pad(estDate.getHours())}:${pad(estDate.getMinutes())}:${pad(estDate.getSeconds())} EST`;

    return {
      techExec: record.techExec,
      ait: record.ait,
      spk: record.spk,
      deploymentEnvironment: record.deploymentEnvironment,
      repository: record.repository,
      artifactUrl: record.artifactUrl,
      scmBranch: record.scmBranch,
      deployedDate: formattedDate,
      deploymentStatus: record.deploymentStatus,
      ansiblePlaybook: record.ansiblePlaybook
    };
  });

  const headers = [
    'TechExecutive',
    'Ait',
    'Spk',
    'DeploymentEnvironment',
    'Repository',
    'ArtifactUrl',
    'ScmBranch',
    'DeployedDate EST',
    'DeploymentStatus',
    'AnsiblePlaybook'
  ];

  const delimiter = ',';
  const csvContent = [
    headers.join(delimiter),
    ...csvData.map((record) => [
      record.techExec,
      record.ait,
      record.spk,
      record.deploymentEnvironment,
      record.repository,
      record.artifactUrl,
      record.scmBranch,
      record.deployedDate,
      record.deploymentStatus,
      record.ansiblePlaybook
    ].map(v => `"${String(v).replace(/"/g, '""')}"`).join(delimiter))
  ].join('\n');

  const csvFile = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  link.href = URL.createObjectURL(csvFile);
  link.download = 'Deployment_Metrics.csv';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);

  isExported.value = false;
};
