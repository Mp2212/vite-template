let donutRef = { value: null }
let execBarRef = { value: null }

async function loadStatusCharts(payload) {
  try {
    // ------------- Fetch API -------------
    const res = await fetch('/api/', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      body: JSON.stringify(payload)
    })

    const raw = await res.json()
    if (!raw || typeof raw !== 'object') return

    // ------------- Normalize Data -------------
    const STATUS = ['successful', 'failed', 'running', 'canceled']
    const COLORS = {
      successful: '#16a34a', // green
      failed: '#dc2626',     // red
      running: '#eab308',    // yellow
      canceled: '#f97316'    // orange
    }

    const names = Object.keys(raw)
    const byStatus = Object.fromEntries(STATUS.map(s => [s, Array(names.length).fill(0)]))

    names.forEach((name, i) => {
      const obj = raw[name] || {}
      STATUS.forEach(s => {
        byStatus[s][i] = Number(obj[s] || 0)
      })
    })

    // ------------- Totals -------------
    const totals = STATUS.map(s => byStatus[s].reduce((a, b) => a + b, 0))
    const grandTotal = totals.reduce((a, b) => a + b, 0)

    // ───────────────────────────────────────────────
    // DONUT CHART (Total Deployments Summary)
    // ───────────────────────────────────────────────
    if (donutRef.value) donutRef.value.destroy()
    const donutCtx = document.getElementById('statusDonut')?.getContext('2d')
    if (donutCtx) {
      // Plugin to draw center total text
      const centerText = {
        id: 'centerText',
        afterDraw(chart) {
          const { ctx, chartArea } = chart
          if (!chartArea) return
          const centerX = (chartArea.left + chartArea.right) / 2
          const centerY = (chartArea.top + chartArea.bottom) / 2
          ctx.save()
          ctx.textAlign = 'center'
          ctx.textBaseline = 'middle'
          ctx.fillStyle = '#111827'
          ctx.font = '600 13px "Segoe UI", Roboto'
          ctx.fillText('Total Deployments', centerX, centerY - 10)
          ctx.font = 'bold 22px "Segoe UI", Roboto'
          ctx.fillText(grandTotal.toString(), centerX, centerY + 15)
          ctx.restore()
        }
      }

      donutRef.value = new Chart(donutCtx, {
        type: 'doughnut',
        data: {
          labels: STATUS.map(s => s[0].toUpperCase() + s.slice(1)),
          datasets: [{
            data: totals,
            backgroundColor: STATUS.map(s => COLORS[s]),
            borderColor: '#fff',
            borderWidth: 2
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          cutout: '68%',
          plugins: {
            legend: { position: 'bottom' },
            datalabels: {
              color: '#111',
              formatter: (v) => (v > 0 ? v : ''),
              font: { weight: 'bold', size: 11 }
            },
            tooltip: {
              backgroundColor: '#1e3a8a',
              titleColor: '#fff',
              bodyColor: '#fff'
            }
          }
        },
        plugins: [centerText, ChartDataLabels]
      })
    }

    // ───────────────────────────────────────────────
    // STACKED BAR CHART (Deployment by Tech Exec)
    // ───────────────────────────────────────────────
    if (execBarRef.value) execBarRef.value.destroy()
    const barCtx = document.getElementById('execBar')?.getContext('2d')
    if (barCtx) {
      const envName = (payload?.env || '').toUpperCase() || 'ALL'

      execBarRef.value = new Chart(barCtx, {
        type: 'bar',
        data: {
          labels: names,
          datasets: STATUS.map(s => ({
            label: s[0].toUpperCase() + s.slice(1),
            data: byStatus[s],
            backgroundColor: COLORS[s],
            borderWidth: 0
          }))
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            x: {
              stacked: true,
              grid: { display: false },
              ticks: { color: '#374151', autoSkip: false, maxRotation: 45 }
            },
            y: {
              stacked: true,
              beginAtZero: true,
              ticks: {
                precision: 0,
                color: '#6B7280',
                callback: (value) => Math.round(value)
              },
              grid: { color: 'rgba(0,0,0,0.06)' }
            }
          },
          plugins: {
            legend: { position: 'top' },
            title: {
              display: true,
              text: `${envName} Deployment by Tech Exec`,
              color: '#0F172A',
              font: { weight: '700', size: 14 }
            },
            datalabels: {
              color: '#111',
              formatter: (v) => (v > 0 ? v : ''),
              anchor: 'end',
              align: 'top',
              clamp: true
            },
            tooltip: {
              mode: 'index',
              intersect: false
            }
          }
        },
        plugins: [ChartDataLabels]
      })
    }
  } catch (e) {
    console.error('Failed to load status charts:', e)
  }
}