/* Searchbox */
.searchbox .input-group {
  max-width: 400px;
  margin: 0 auto;
}

/* Tags */
.tags {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
}

.tag {
  background-color: #e9ecef;
  color: #495057;
  padding: 5px 10px;
  border-radius: 15px;
  display: flex;
  align-items: center;
  font-size: 0.875rem;
}

/* Remove Button */
.tag .btn-close {
  background: none;
  border: none;
  font-size: 0.75rem;
  margin-left: 5px;
  color: #6c757d;
  cursor: pointer;
}

/* Card Header */
.card-header {
  padding-bottom: 1rem;
  border-bottom: 1px solid #ddd;
}

/* Card Title */
.card-title {
  margin-top: 1rem;
  font-size: 1.25rem;
  font-weight: bold;
}


<div class="card shadow card-olympos">
  <!-- Search Box and Tags -->
  <div class="card-header">
    <div class="searchbox ms-auto">
      <div class="input-group">
        <span class="input-group-text"><i class="fas fa-search"></i></span>
        <input 
          type="text" 
          class="form-control globalsearch" 
          placeholder="Type and press enter to search"
          v-model="newSearchTerm"
          @keyup.enter="addSearchTag"
        />
      </div>
    </div>
    <div class="tags mt-2">
      <span class="tag" v-for="(tag, index) in searchTags" :key="index">
        {{ tag }}
        <button class="btn-close ms-1" @click="removeSearchTag(tag)"></button>
      </span>
    </div>
  </div>

  <!-- Card Title -->
  <div class="card-body">
    <h5 class="card-title">Deployed Artifacts</h5>
    <!-- Other content goes here -->
  </div>
</div>




<template>
  <div>
    <canvas id="topEnvironmentsChart" width="400" height="300"></canvas>
  </div>
</template>

<script setup>
import { onMounted, onBeforeUnmount } from 'vue';
import Chart from 'chart.js/auto';

let chartInstance = null; // Reference for the Chart.js instance

const createTopEnvironmentsChart = async () => {
  try {
    // Destroy the existing chart instance if it exists
    if (chartInstance) {
      chartInstance.destroy();
    }

    // Get the canvas context
    const canvas = document.getElementById('topEnvironmentsChart');
    const ctx = canvas.getContext('2d');

    // Construct the payload
    const payload = {
      pageSize: 25,
      isProd: true,
      isFrontend: true,
      page: 1,
      pageAll: true,
      techExec: [],
      ait: [],
      env: [],
    };

    // Fetch data from the API
    const response = await fetch(
      '',
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      }
    );

    if (!response.ok) {
      throw new Error('Failed to fetch data from the API');
    }

    const data = await response.json();

    // Process data to get the top 20 environments
    const sortedData = Object.entries(data)
      .sort(([, a], [, b]) => b - a)
      .slice(0, 20);

    if (sortedData.length === 0) {
      // Show "No Data Available" message in the canvas
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      ctx.font = '16px Arial';
      ctx.textAlign = 'center';
      ctx.fillText('No Data Available', canvas.width / 2, canvas.height / 2);
      return;
    }

    const labels = sortedData.map(([key]) => key);
    const counts = sortedData.map(([, value]) => value);

    // Create a new Chart.js instance
    chartInstance = new Chart(ctx, {
      type: 'bar',
      data: {
        labels,
        datasets: [
          {
            label: 'Top 20 Environments and Builds',
            data: counts,
            backgroundColor: [
              '#80BCBD', '#98DDCA', '#FF6464', '#F7A76C',
              '#80BCBD', '#98DDCA', '#FF6464', '#F7A76C',
              '#80BCBD', '#98DDCA', '#FF6464', '#F7A76C',
              '#80BCBD', '#98DDCA', '#FF6464', '#F7A76C',
              '#80BCBD', '#98DDCA', '#FF6464', '#F7A76C',
            ],
          },
        ],
      },
      options: {
        plugins: {
          legend: { display: true },
        },
        maintainAspectRatio: false,
        responsive: true,
        layout: {
          padding: 10,
        },
      },
    });
  } catch (error) {
    // Show "Error fetching data" message in the canvas
    const canvas = document.getElementById('topEnvironmentsChart');
    const ctx = canvas.getContext('2d');
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.font = '16px Arial';
    ctx.textAlign = 'center';
    ctx.fillText('Error fetching data', canvas.width / 2, canvas.height / 2);
    console.error('Error creating the chart:', error);
  }
};

// Call the function when the component is mounted
onMounted(() => {
  createTopEnvironmentsChart();
});

// Cleanup the chart when the component is unmounted
onBeforeUnmount(() => {
  if (chartInstance) {
    chartInstance.destroy();
    chartInstance = null;
  }
});
</script>
